---
# This playbook gathers facts from hosts in an environment for the purposes
# of the user survey and other useful bits for RXT.

- name: Write rax facts into a csv file
  hosts:
    - lxc_hosts
    - controller_hosts
    - compute_hosts

  vars:
    output_path: "/root/gimme_reports"
    filename: "cloud_report_{{ date }}.csv"
    instance_count: 0

  tasks:
  - name: Create reports directory if it does not exist
    file:
      path: "{{ output_path }}"
      state: directory
      mode: '0755'
    delegate_to: localhost
    run_once: true

  - name: Collect facts
    setup:

  - name: Register OpenStack Distribution
    shell: "cat /etc/openstack-release | grep DISTRIB_ID | sed -e 's/.*=//' | xargs"
    register: openstack_distrib

  - name: Register OpenStack Release
    shell: "cat /etc/openstack-release | grep DISTRIB_RELEASE | sed -e 's/.*=//' | xargs"
    register: openstack_release

  - name: Register OpenStack Codename
    shell: "cat /etc/openstack-release | grep DISTRIB_CODENAME | sed -e 's/.*=//' | xargs"
    register: openstack_codename

  - name: Register CPU model name
    shell: "cat /proc/cpuinfo | grep 'model name' | sort -u -k1 | sed -e 's/.*://' | xargs"
    register: cpu_model

# Grab the mechanism drivers, change from comma-delimited
# to colon-delimited to avoid CSV issues
  - name: Register Neutron Plugin
    shell: "cat /etc/neutron/plugins/ml2/ml2_conf.ini | grep mechanism_drivers | sed -e 's/.*=//' | sed s/,/:/g | xargs"
    register: mechanism_drivers

# NOTE: may need to adapt to mysql_query for older environments
# May need login_unix_socket for baremetal (not LXC)
#  - name: Get instance count from MySQL
#    community.mysql.mysql_query:
#      login_db: nova
#      query: select count(*) from instances where deleted_at is NULL;
#      login_unix_socket: /var/run/mysqld/mysqld.sock
#    run_once: true
#    delegate_to: localhost
#    register: instance_count

#  - debug:
#      msg: "total instances: {{ instance_count.query_result[0][0]['count(*)'] }}"

  - name: CSV - Generate output filename
    set_fact: date="{{lookup('pipe','date +%Y%m%d%H%M%S')}}"
    run_once: true

  - name: CSV - Create file and set the header
    lineinfile:
      dest: "{{ output_path }}/{{ filename }}"
      line:
        hostname,kernel,distribution,distribution_release,distribution_version,bios_vendor,board_name,memtotal_mb,processor,architecture,processors_count,processor_cores,total_cores,processor_nproc,mechanism_drivers,total_instance_count,openstack_distrib,openstack_release,openstack_codename
      create: yes
      state: present
    run_once: true
    delegate_to: localhost

# NOTE: figure out why ansible_hostname isn't working here
  - name: CSV - Get host facts
    set_fact:
      csv_tmp: >
        {{ inventory_hostname }},{{ ansible_kernel }},{{ ansible_distribution }},{{ ansible_distribution_release }},{{ ansible_distribution_version }},{{ ansible_bios_vendor | default('N/A') }},{{ ansible_board_name | default('N/A') }},{{ (ansible_memtotal_mb / 1024.0) | round(2, 'floor') }},{{ cpu_model.stdout }},{{ ansible_architecture }},{{ ansible_processor_count }},{{ ansible_processor_cores }},{{ ansible_processor_count * ansible_processor_cores }},{{ ansible_processor_nproc | default('N/A') }},[{{ mechanism_drivers.stdout }}],{{ instance_count }},{{ openstack_distrib.stdout }},{{ openstack_release.stdout | default('UNK') }},{{ openstack_codename.stdout }}

  - name: CSV - Write information into .csv file
    lineinfile:
      insertafter: EOF
      dest: "{{ output_path }}/{{ filename }}"
      line: "{{ csv_tmp }}"
    delegate_to: localhost

#  - debug:
#      msg: "hostname is {{ ansible_hostname }}"

  - name: CSV - Blank lines removal
    lineinfile:
      path: "{{ output_path }}/{{ filename }}"
      state: absent
      regexp: '^\s*$'
    delegate_to: localhost
    run_once: true

  - debug:
      msg: "Output file is {{ output_path }}/{{ filename }}"
    delegate_to: localhost
    run_once: true
